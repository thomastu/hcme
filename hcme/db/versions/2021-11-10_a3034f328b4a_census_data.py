"""census data

Revision ID: a3034f328b4a
Revises: fc518467b5c0
Create Date: 2021-11-10 14:13:41.754251

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import geoalchemy2


# revision identifiers, used by Alembic.
revision = "a3034f328b4a"
down_revision = "fc518467b5c0"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "census_block",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "id", sa.String(length=15), autoincrement=False, nullable=False
        ),
        sa.Column("state_code", sa.String(length=2), nullable=False),
        sa.Column("county_code", sa.String(length=5), nullable=False),
        sa.Column("tract_code", sa.String(length=6), nullable=False),
        sa.Column("total_population", sa.Integer(), nullable=False),
        sa.Column("total_households", sa.Integer(), nullable=False),
        sa.Column("pct_m", sa.Float(), nullable=False),
        sa.Column("pct_f", sa.Float(), nullable=False),
        sa.Column("pct_family_household", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("state_code", "county_code", "tract_code"),
    )
    op.create_table(
        "census_block_age",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("block_id", sa.String(), nullable=False),
        sa.Column("pct", sa.Float(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("pct_veteran", sa.Float(), nullable=False),
        sa.Column("lower_bound", sa.Integer(), nullable=False),
        sa.Column("upper_bound", sa.Integer(), nullable=False),
        sa.Column("sex", sa.String(length=1), nullable=False),
        sa.CheckConstraint("sex IN ('M', 'F')"),
        sa.CheckConstraint("pct BETWEEN SYMMETRIC 0 AND 1"),
        sa.CheckConstraint("pct_veteran BETWEEN SYMMETRIC 0 AND 1"),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["census_block.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "block_id", "sex", name="census_block_age_block_id_sex"
        ),
    )
    op.create_table(
        "census_block_economics",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("block_id", sa.String(), nullable=False),
        sa.Column("pct", sa.Float(), nullable=False),
        sa.Column(
            "household_income_lower_bound", sa.Integer(), nullable=False
        ),
        sa.Column(
            "household_income_upper_bound", sa.Integer(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["census_block.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "block_id",
            "household_income_lower_bound",
            "household_income_upper_bound",
            name="census_block_econ_block_id_bounds",
        ),
    )
    op.create_table(
        "census_block_household",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("block_id", sa.String(), nullable=False),
        sa.Column("pct_family_household", sa.Float(), nullable=False),
        sa.Column("pct_nonfamily_household", sa.Float(), nullable=False),
        sa.Column("pct_nonfamily_alone", sa.Float(), nullable=False),
        sa.CheckConstraint(
            "pct_family_household + pct_nonfamily_household = 1"
        ),
        sa.CheckConstraint("pct_family_household BETWEEN SYMMETRIC 0 AND 1"),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["census_block.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "locations", sa.Column("residential", sa.Boolean(), nullable=False)
    )
    op.add_column(
        "locations", sa.Column("city", sa.String(length=50), nullable=False)
    )
    op.add_column(
        "locations", sa.Column("zipcode", sa.String(length=5), nullable=False)
    )
    op.add_column(
        "locations",
        sa.Column(
            "carrier_route_description", sa.String(length=50), nullable=True
        ),
    )
    op.add_column(
        "locations",
        sa.Column("carrier_route_id", sa.String(length=10), nullable=True),
    )
    op.add_column(
        "locations",
        sa.Column("valid_delivery_area", sa.Boolean(), nullable=False),
    )
    op.add_column(
        "locations",
        sa.Column("census_block_geoid", sa.String(), nullable=False),
    )
    op.create_foreign_key(
        None, "locations", "census_block", ["census_block_geoid"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "locations", type_="foreignkey")
    op.drop_column("locations", "census_block_geoid")
    op.drop_column("locations", "valid_delivery_area")
    op.drop_column("locations", "carrier_route_id")
    op.drop_column("locations", "carrier_route_description")
    op.drop_column("locations", "zipcode")
    op.drop_column("locations", "city")
    op.drop_column("locations", "residential")
    op.drop_table("census_block_household")
    op.drop_table("census_block_economics")
    op.drop_table("census_block_age")
    op.drop_table("census_block")
    # ### end Alembic commands ###
